// -*- mode: c++; tab-width: 16 -*-

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-while-undecided;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 15 16 6 8 16 17 18 27 28 29 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 37 36 35>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-while-undecided;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };

        qu_or_kp: qu_or_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "QU_OR_KP";
            bindings = <&kp>, <&qu>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hmr_alt: hmr_alt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_ALT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
        };

        hml_alt: hml_alt {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_ALT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 15 16 6 8 16 17 18 27 28 29 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 37 36 35>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_q {
            bindings = <&kp Q>;
            key-positions = <31 36>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp Q>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_tap>,
                <&kp U>;

            label = "QU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            bindings = <
       &kp F        &kp P            &kp D         &kp L         &kp X        &kp SEMI    &kp U         &kp O         &kp Y            &kp B
       &hml LGUI S  &hml_alt LALT N  &hml LCTRL T  &hml LSHFT H  &kp K        &kp COMMA   &hmr RSHFT A  &hmr RCTRL E  &hmr_alt LALT I  &hmr RGUI C
&kp Z  &kp V        &kp W            &kp G         &kp M         &kp J        &kp MINUS   &kp DOT       &kp APOS      &kp EQUAL        &kp SLASH    &qu
                                     &key_repeat   &kp R         &lt 0 TAB    &lt 0 BSPC  &kp SPACE     &kp RET
            >;

            label = "Base";
        };
    };
};
